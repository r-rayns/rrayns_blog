---
export interface Props {
  class?: string;
}

let {class: className} = Astro.props as Props;
className = `${className} hover:ring-1 rounded-full drop-shadow-md bg-cyan-100
dark:bg-zinc-900 md:rounded-md p-1 text-base`;
---

<button id="theme-toggle" class={className}><span
    class="text-sm font-mono text-cyan-800 dark:text-cyan-100 hidden md:inline">theme</span> <span id="mode-icon"
                                                                                                   class="relative top-[-1px]"></span>
</button>

<script is:inline>
  const themeToggle = document.getElementById("theme-toggle");
  const modeIcon = document.getElementById("mode-icon");
  themeToggle.addEventListener("click", toggleTheme);

  if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
    setTheme(localStorage.getItem("theme"));
  } else {
    const systemThemeIsDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    setTheme(systemThemeIsDark ? "dark" : "light");
  }

  function setTheme(mode) {
    if (mode === "dark") {
      modeIcon.innerHTML = "ðŸŒ™";
      document.documentElement.classList.add("dark");
    } else {
      modeIcon.innerHTML = "ðŸŒž";
      document.documentElement.classList.remove("dark");
    }
    window.localStorage.setItem("theme", mode);
  }

  function toggleTheme() {
    const current = localStorage.getItem("theme");
    setTheme(current === "dark" ? "light" : "dark");
  }
</script>
